from TinhToan3 import *
from timNuocTrongBanCo_3 import *

# tinh tong diem cua mot nguoi choi
def tongDoNguyHiem(type, board):
    result = [0, 0, 0, 0, 0, 0]
    type_I = notType(type)
    daDiCMNR = []
    for x in range(15):
        for y in range(15):
            if board[y][x] == type:
                result = add(result, doNguyHiemCuaNuoc(x, y, type, board))
                setBoard([x, y], board, type_I)
                daDiCMNR.append([x, y])
    for move in daDiCMNR:
        setBoard(move, board, type)
    return result

def doNguyHiemCuaNuoc(x, y, type, board): # COMPLETE
    temp = tapCacNuoc(x, y)
    result = [0, 0, 0, 0, 0, 0]
    for i in temp:
        nhanBiet = []
        for j in i:
            if board[j[1]][j[0]] == type:
                nhanBiet.append(1)
            elif board[j[1]][j[0]] == notType(type):
                nhanBiet.append(2)
            else:
                nhanBiet.append(0)
        if nhanBiet in nuocBon_chat_che:
            result[0] += 1
        elif nhanBiet in nuocBon_long_leo:
            result[1] += 1
        elif nhanBiet in nuocBa_chat_che:
            result[2] += 1
        elif nhanBiet in nuocBa_long_leo:
            result[3] += 1
        elif nhanBiet in nuocDoi_chat_che:
            result[4] += 1
        elif nhanBiet in nuocDoi_long_leo:
            result[5] += 1
    return result

def thoaMan(tapConTrai, tapConGai, tapConNuoi, type, board, flag = False):
    result = []
    type_I = notType(type)
    if flag:
        if vuotKichThuocMang(tapConTrai[0][0], tapConTrai[0][1]) or board[tapConTrai[0][1]][tapConTrai[0][0]] != type:
            return []
    for move in tapConGai:
        if vuotKichThuocMang(move[0], move[1]) or board[move[1]][move[0]] == type_I:
            return []
    if vuotKichThuocMang(tapConNuoi[0][0], tapConNuoi[0][1]) or board[tapConNuoi[0][1]][tapConNuoi[0][0]] == type_I:
        if vuotKichThuocMang(tapConNuoi[1][0], tapConNuoi[1][1]) or board[tapConNuoi[1][1]][tapConNuoi[1][0]] == type_I:
            return []
    for move in tapConTrai:
        if vuotKichThuocMang(move[0], move[1]) or board[move[1]][move[0]] == type_I:
            return []
        if board[move[1]][move[0]] == type and move not in result:
            result.append(move)
    if len(result)  < 2:
        return []
    elif len(result) == 2:
        if vuotKichThuocMang(tapConNuoi[0][0], tapConNuoi[0][1]) or board[tapConNuoi[0][1]][tapConNuoi[0][0]] == type_I:
            return []
        if vuotKichThuocMang(tapConNuoi[1][0], tapConNuoi[1][1]) or board[tapConNuoi[1][1]][tapConNuoi[1][0]] == type_I:
            return []
    return result

# nuoc doi, nuoc 3,....
def gameWin(type, board):
    cacNuocDiDuoc = tapCacNuocCoTheDi(board, True)
    for i in cacNuocDiDuoc:
        if nuocDacBietNewVersion(i[0], i[1], type, board) > 0:
            return True
    return False

def chacChanWin(type, board):
    for x in range(15):
        for y in range(15):
            if board[y][x] == type:
                if winCMNR([x, y], set_1_XetWin[0], set_1_XetWin[1], type, board):
                    return True
                if winCMNR([x, y], set_2_XetWin[0], set_2_XetWin[1], type, board):
                    return True
                if winCMNR([x, y], set_3_XetWin[0], set_3_XetWin[1], type, board):
                    return True
                if winCMNR([x, y], set_4_XetWin[0], set_4_XetWin[1], type, board):
                    return True
    return False

def winCMNR(toaDo, tapConTrai, tapConGai, type, board):
    type_I = notType(type)
    if vuotKichThuocMang(tapConGai[0][0] + toaDo[0], tapConGai[0][1] + toaDo[1]) or board[tapConGai[0][1] + toaDo[1]][tapConGai[0][0] + toaDo[0]] == type_I:
        if vuotKichThuocMang(tapConGai[1][0] + toaDo[0], tapConGai[1][1] + toaDo[1]) or board[tapConGai[1][1] + toaDo[1]][tapConGai[1][0] + toaDo[0]] == type_I:
            return False
    for i in tapConTrai:
        y = i[1] + toaDo[1]
        x = i[0] + toaDo[0]
        if vuotKichThuocMang(x, y) or board[y][x] != type:
            return False
    return True

def nuocDacBiet(x, y, type, board):
    set_1 = [[[[0, -1], [0, -2], [0, -3]], [[0, -4], [0, 1]], [[0, -5], [0, 2]]],
             [[[-1, 0], [-2, 0], [-3, 0]], [[-4, 0], [1, 0]], [[-5, 0], [2, 0]]],
             [[[0, 1], [0, 2], [0, 3]], [[0, 4], [0, -1]], [[0, 5], [0, -2]]],
             [[[1, 0], [2, 0], [3, 0]], [[4, 0], [-1, 0]], [[5, 0], [-2, 0]]]]
    set_2 = [[[[0, 1], [0, -1], [0, -2]], [[0, -3], [0, 2]], [[0, -4], [0, 3]]],
             [[[1, 0], [-1, 0], [-2, 0]], [[-3, 0], [2, 0]], [[-4, 0], [3, 0]]],
             [[[0, -1], [0, 1], [0, 2]], [[0, 3], [0, -2]], [[0, 4], [0, -3]]],
             [[[-1, 0], [1, 0], [2, 0]], [[3, 0], [-2, 0]], [[4, 0], [-3, 0]]]]
    set_3 = [[[[1, -1], [2, -2], [3, -3]], [[-1, 1], [4, -4]], [[5, -5], [-2, 2]]],
             [[[-1, 1], [-2, 2], [-3, 3]], [[1, -1], [-4, 4]], [[-5, 5], [2, -2]]],
             [[[1, 1], [2, 2], [3, 3]], [[-1, -1], [4, 4]], [[5, 5], [-2, -2]]],
             [[[-1, -1], [-2, -2], [-3, -3]], [[1, 1], [-4, -4]], [[-5, -5], [2, 2]]]]
    set_4 = [[[[-1, 1], [1, -1], [2, -2]], [[3, -3], [-2, 2]], [[-3, 3], [4, -4]]],
             [[[1, -1], [-1, 1], [-2, 2]], [[-3, 3], [2, -2]], [[3, -3], [-4, 4]]],
             [[[-1, -1], [1, 1], [2, 2]], [[3, 3], [-2, -2]], [[-3, -3], [4, 4]]],
             [[[1, 1], [-1, -1], [-2, -2]], [[-3, -3], [2, 2]], [[3, 3], [-4, -4]]]]
    for i in range(4):
        for j in range(3):
            l = len(set_1[i][j])
            for t in range(l):
                set_1[i][j][t] = [x + set_1[i][j][t][0], y + set_1[i][j][t][1]]
                set_2[i][j][t] = [x + set_2[i][j][t][0], y + set_2[i][j][t][1]]
                set_3[i][j][t] = [x + set_3[i][j][t][0], y + set_3[i][j][t][1]]
                set_4[i][j][t] = [x + set_4[i][j][t][0], y + set_4[i][j][t][1]]
    cacNuocDoi = []
    for ix in range(4):
        i1 = set_1[ix]
        i2 = set_2[ix]
        i3 = set_3[ix]
        i4 = set_4[ix]
        k1 = thoaMan(i1[0], i1[1], i1[2], type, board)
        k2 = thoaMan(i2[0], i2[1], i2[2], type, board, True)
        k3 = thoaMan(i3[0], i3[1], i3[2], type, board)
        k4 = thoaMan(i4[0], i4[1], i4[2], type, board, True)
        cacNuocDoi = themTapVao(k1, cacNuocDoi)
        cacNuocDoi = themTapVao(k2, cacNuocDoi)
        cacNuocDoi = themTapVao(k3, cacNuocDoi)
        cacNuocDoi = themTapVao(k4, cacNuocDoi)
        if len(cacNuocDoi) >= 4:
            return True
    return False

def chonNuocToiUu(coTheDi, type, board):
    tapNuocDuocChon = []
    temp1 = []
    tong_diem = 0
    if type == 'X':
        for move in coTheDi:
            setBoard(move, board, 'O')
            if gameWin("O", board):
                tapNuocDuocChon.append(move)
            setBoard(move, board, 'X')
            if gameWin("X", board):
                if move not in tapNuocDuocChon:
                    tapNuocDuocChon.append(move)
            removeBoard(move, board)
            if tapNuocDuocChon == []:
                setBoard(move, board, 'X')
                x = tongDoNguyHiem('X', board)
                o = tongDoNguyHiem('O', board)
                removeBoard(move, board)
                d = diemCuaMaTran(x) - diemCuaMaTran(o)
                temp1.append([move, d])
                tong_diem += d
        tong_diem = tong_diem / len(coTheDi)
        for i in temp1:
            if i[1] >= tong_diem:
                tapNuocDuocChon.append(i[0])
    else:
        for move in coTheDi:
            setBoard(move, board, 'X')
            if gameWin("X", board):
                tapNuocDuocChon.append(move)
            setBoard(move, board, 'O')
            if gameWin("O", board):
                if move not in tapNuocDuocChon:
                    tapNuocDuocChon.append(move)
            removeBoard(move, board)
            if tapNuocDuocChon == []:
                setBoard(move, board, 'O')
                x = tongDoNguyHiem('X', board)
                o = tongDoNguyHiem('O', board)
                removeBoard(move, board)
                d = diemCuaMaTran(x) - diemCuaMaTran(o)
                temp1.append([move, d])
                tong_diem += d
        tong_diem = tong_diem / len(coTheDi)
        for i in temp1:
            if i[1] <= tong_diem:
                tapNuocDuocChon.append(i[0])
    return tapNuocDuocChon

def thoaManNewVersion(tapConTrai, tapConGai, tapConNuoi, type, board):
    type_I = notType(type)
    for move in tapConNuoi:
        if vuotKichThuocMang(move[0], move[1]) or board[move[1]][move[0]] == type_I:
            return False
    for move in tapConGai:
        if vuotKichThuocMang(move[0], move[1]) or board[move[1]][move[0]] != '#':
            return False
    for move in tapConTrai:
        if vuotKichThuocMang(move[0], move[1]) or board[move[1]][move[0]] != type:
            return False
    return True

def nuocDacBietNewVersion(x, y, type, board):
    NuocHaiBa = [
        [[[[-1, 0], [-2, 0], [-3, 0]], [[-4, 0], [1, 0]]], [[[-1, 0], [-2, 0], [-3, 0]], [[2, 0], [1, 0]]],
         [[[-1, 0], [-2, 0], [-3, 0]], [[-4, 0], [-5, 0]]], [[[-1, 0], [-2, 0], [1, 0]], [[-3, 0], [-4, 0]]],
         [[[-1, 0], [-2, 0], [1, 0]], [[-3, 0], [2, 0]]], [[[-1, 0], [-2, 0], [1, 0]], [[3, 0], [3, 0]]],
         [[[1, 0], [-2, 0], [-3, 0]], [[-1, 0], [2, 0]]], [[[1, 0], [-2, 0], [-3, 0]], [[-1, 0], [-4, 0]]],
         [[[-2, 0], [-3, 0], [-4, 0]], [[-1, 0], [-5, 0]]], [[[-2, 0], [-3, 0], [-4, 0]], [[-1, 0], [1, 0]]],
         [[[1, 0], [2, 0], [-2, 0]], [[-1, 0], [3, 0]]], [[[1, 0], [2, 0], [-2, 0]], [[-1, 0], [-3, 0]]],
         [[[1, 0], [-1, 0], [-3, 0]], [[-2, 0], [2, 0]]], [[[1, 0], [-1, 0], [-3, 0]], [[-2, 0], [4, 0]]],
         [[[-1, 0], [-3, 0], [-4, 0]], [[-2, 0], [1, 0]]], [[[-1, 0], [-3, 0], [-4, 0]], [[-2, 0], [5, 0]]],
         [[[-1, 0], [-2, 0]], [[1, 0], [2, 0], [-3, 0], [-4, 0]], [[-5, 0]]],
         [[[-1, 0], [-2, 0]], [[1, 0], [2, 0], [-3, 0], [-4, 0]], [[3, 0]]],
         [[[-1, 0], [-3, 0]], [[-2, 0], [-4, 0], [1, 0]], [[-5, 0], [2, 0]]],
         [[[-2, 0], [-3, 0]], [[-1, 0], [-4, 0], [1, 0]], [[2, 0], [-5, 0]]],
         [[[-1, 0], [1, 0]], [[-2, 0], [2, 0], [-3, 0], [3, 0]], [[-4, 0]]],
         [[[-1, 0], [1, 0]], [[-2, 0], [2, 0], [-3, 0], [3, 0]], [[4, 0]]],
         [[[1, 0], [-2, 0]], [[-1, 0], [2, 0], [-3, 0]], [[3, 0], [-4, 0]]]],
        [[[[-1, -1], [-2, -2], [-3, -3]], [[-4, -4], [1, 1]]], [[[-1, -1], [-2, -2], [-3, -3]], [[2, 2], [1, 1]]],
         [[[-1, -1], [-2, -2], [-3, -3]], [[-4, -4], [-5, -5]]],
         [[[-1, -1], [-2, -2], [1, 1]], [[-3, -3], [-4, -4]]], [[[-1, -1], [-2, -2], [1, 1]], [[-3, -3], [2, 2]]],
         [[[-1, -1], [-2, -2], [1, 1]], [[3, 3], [3, 3]]], [[[1, 1], [-2, -2], [-3, -3]], [[-1, -1], [2, 2]]],
         [[[1, 1], [-2, -2], [-3, -3]], [[-1, -1], [-4, -4]]],
         [[[-2, -2], [-3, -3], [-4, -4]], [[-1, -1], [-5, -5]]],
         [[[-2, -2], [-3, -3], [-4, -4]], [[-1, -1], [1, 1]]], [[[1, 1], [2, 2], [-2, -2]], [[-1, -1], [3, 3]]],
         [[[1, 1], [2, 2], [-2, -2]], [[-1, -1], [-3, -3]]], [[[1, 1], [-1, -1], [-3, -3]], [[-2, -2], [2, 2]]],
         [[[1, 1], [-1, -1], [-3, -3]], [[-2, -2], [4, 4]]], [[[-1, -1], [-3, -3], [-4, -4]], [[-2, -2], [1, 1]]],
         [[[-1, -1], [-3, -3], [-4, -4]], [[-2, -2], [5, 5]]],
         [[[-1, -1], [-2, -2]], [[1, 1], [2, 2], [-3, -3], [-4, -4]], [[-5, -5]]],
         [[[-1, -1], [-2, -2]], [[1, 1], [2, 2], [-3, -3], [-4, -4]], [[3, 3]]],
         [[[-1, -1], [-3, -3]], [[-2, -2], [-4, -4], [1, 1]], [[-5, -5], [2, 2]]],
         [[[-2, -2], [-3, -3]], [[-1, -1], [-4, -4], [1, 1]], [[2, 2], [-5, -5]]],
         [[[-1, -1], [1, 1]], [[-2, -2], [2, 2], [-3, -3], [3, 3]], [[-4, -4]]],
         [[[-1, -1], [1, 1]], [[-2, -2], [2, 2], [-3, -3], [3, 3]], [[4, 4]]],
         [[[1, 1], [-2, -2]], [[-1, -1], [2, 2], [-3, -3]], [[3, 3], [-4, -4]]]],
        [[[[0, -1], [0, -2], [0, -3]], [[0, -4], [0, 1]]], [[[0, -1], [0, -2], [0, -3]], [[0, 2], [0, 1]]],
         [[[0, -1], [0, -2], [0, -3]], [[0, -4], [0, -5]]], [[[0, -1], [0, -2], [0, 1]], [[0, -3], [0, -4]]],
         [[[0, -1], [0, -2], [0, 1]], [[0, -3], [0, 2]]], [[[0, -1], [0, -2], [0, 1]], [[0, 3], [0, 3]]],
         [[[0, 1], [0, -2], [0, -3]], [[0, -1], [0, 2]]], [[[0, 1], [0, -2], [0, -3]], [[0, -1], [0, -4]]],
         [[[0, -2], [0, -3], [0, -4]], [[0, -1], [0, -5]]], [[[0, -2], [0, -3], [0, -4]], [[0, -1], [0, 1]]],
         [[[0, 1], [0, 2], [0, -2]], [[0, -1], [0, 3]]], [[[0, 1], [0, 2], [0, -2]], [[0, -1], [0, -3]]],
         [[[0, 1], [0, -1], [0, -3]], [[0, -2], [0, 2]]], [[[0, 1], [0, -1], [0, -3]], [[0, -2], [0, 4]]],
         [[[0, -1], [0, -3], [0, -4]], [[0, -2], [0, 1]]], [[[0, -1], [0, -3], [0, -4]], [[0, -2], [0, 5]]],
         [[[0, -1], [0, -2]], [[0, 1], [0, 2], [0, -3], [0, -4]], [[0, -5]]],
         [[[0, -1], [0, -2]], [[0, 1], [0, 2], [0, -3], [0, -4]], [[0, 3]]],
         [[[0, -1], [0, -3]], [[0, -2], [0, -4], [0, 1]], [[0, -5], [0, 2]]],
         [[[0, -2], [0, -3]], [[0, -1], [0, -4], [0, 1]], [[0, 2], [0, -5]]],
         [[[0, -1], [0, 1]], [[0, -2], [0, 2], [0, -3], [0, 3]], [[0, -4]]],
         [[[0, -1], [0, 1]], [[0, -2], [0, 2], [0, -3], [0, 3]], [[0, 4]]],
         [[[0, 1], [0, -2]], [[0, -1], [0, 2], [0, -3]], [[0, 3], [0, -4]]]],
        [[[[1, -1], [2, -2], [3, -3]], [[4, -4], [-1, 1]]], [[[1, -1], [2, -2], [3, -3]], [[-2, 2], [-1, 1]]],
         [[[1, -1], [2, -2], [3, -3]], [[4, -4], [5, -5]]], [[[1, -1], [2, -2], [-1, 1]], [[3, -3], [4, -4]]],
         [[[1, -1], [2, -2], [-1, 1]], [[3, -3], [-2, 2]]], [[[1, -1], [2, -2], [-1, 1]], [[-3, 3], [-3, 3]]],
         [[[-1, 1], [2, -2], [3, -3]], [[1, -1], [-2, 2]]], [[[-1, 1], [2, -2], [3, -3]], [[1, -1], [4, -4]]],
         [[[2, -2], [3, -3], [4, -4]], [[1, -1], [5, -5]]], [[[2, -2], [3, -3], [4, -4]], [[1, -1], [-1, 1]]],
         [[[-1, 1], [-2, 2], [2, -2]], [[1, -1], [-3, 3]]], [[[-1, 1], [-2, 2], [2, -2]], [[1, -1], [3, -3]]],
         [[[-1, 1], [1, -1], [3, -3]], [[2, -2], [-2, 2]]], [[[-1, 1], [1, -1], [3, -3]], [[2, -2], [-4, 4]]],
         [[[1, -1], [3, -3], [4, -4]], [[2, -2], [-1, 1]]], [[[1, -1], [3, -3], [4, -4]], [[2, -2], [-5, 5]]],
         [[[1, -1], [2, -2]], [[-1, 1], [-2, 2], [3, -3], [4, -4]], [[5, -5]]],
         [[[1, -1], [2, -2]], [[-1, 1], [-2, 2], [3, -3], [4, -4]], [[-3, 3]]],
         [[[1, -1], [3, -3]], [[2, -2], [4, -4], [-1, 1]], [[5, -5], [-2, 2]]],
         [[[2, -2], [3, -3]], [[1, -1], [4, -4], [-1, 1]], [[-2, 2], [5, -5]]],
         [[[1, -1], [-1, 1]], [[2, -2], [-2, 2], [3, -3], [-3, 3]], [[4, -4]]],
         [[[1, -1], [-1, 1]], [[2, -2], [-2, 2], [3, -3], [-3, 3]], [[-4, 4]]],
         [[[-1, 1], [2, -2]], [[1, -1], [-2, 2], [3, -3]], [[-3, 3], [4, -4]]]],
        [[[[1, 0], [2, 0], [3, 0]], [[4, 0], [-1, 0]]], [[[1, 0], [2, 0], [3, 0]], [[-2, 0], [-1, 0]]],
         [[[1, 0], [2, 0], [3, 0]], [[4, 0], [5, 0]]], [[[1, 0], [2, 0], [-1, 0]], [[3, 0], [4, 0]]],
         [[[1, 0], [2, 0], [-1, 0]], [[3, 0], [-2, 0]]], [[[1, 0], [2, 0], [-1, 0]], [[-3, 0], [-3, 0]]],
         [[[-1, 0], [2, 0], [3, 0]], [[1, 0], [-2, 0]]], [[[-1, 0], [2, 0], [3, 0]], [[1, 0], [4, 0]]],
         [[[2, 0], [3, 0], [4, 0]], [[1, 0], [5, 0]]], [[[2, 0], [3, 0], [4, 0]], [[1, 0], [-1, 0]]],
         [[[-1, 0], [-2, 0], [2, 0]], [[1, 0], [-3, 0]]], [[[-1, 0], [-2, 0], [2, 0]], [[1, 0], [3, 0]]],
         [[[-1, 0], [1, 0], [3, 0]], [[2, 0], [-2, 0]]], [[[-1, 0], [1, 0], [3, 0]], [[2, 0], [-4, 0]]],
         [[[1, 0], [3, 0], [4, 0]], [[2, 0], [-1, 0]]], [[[1, 0], [3, 0], [4, 0]], [[2, 0], [-5, 0]]],
         [[[1, 0], [2, 0]], [[-1, 0], [-2, 0], [3, 0], [4, 0]], [[5, 0]]],
         [[[1, 0], [2, 0]], [[-1, 0], [-2, 0], [3, 0], [4, 0]], [[-3, 0]]],
         [[[1, 0], [3, 0]], [[2, 0], [4, 0], [-1, 0]], [[5, 0], [-2, 0]]],
         [[[2, 0], [3, 0]], [[1, 0], [4, 0], [-1, 0]], [[-2, 0], [5, 0]]],
         [[[1, 0], [-1, 0]], [[2, 0], [-2, 0], [3, 0], [-3, 0]], [[4, 0]]],
         [[[1, 0], [-1, 0]], [[2, 0], [-2, 0], [3, 0], [-3, 0]], [[-4, 0]]],
         [[[-1, 0], [2, 0]], [[1, 0], [-2, 0], [3, 0]], [[-3, 0], [4, 0]]]],
        [[[[1, 1], [2, 2], [3, 3]], [[4, 4], [-1, -1]]], [[[1, 1], [2, 2], [3, 3]], [[-2, -2], [-1, -1]]],
         [[[1, 1], [2, 2], [3, 3]], [[4, 4], [5, 5]]], [[[1, 1], [2, 2], [-1, -1]], [[3, 3], [4, 4]]],
         [[[1, 1], [2, 2], [-1, -1]], [[3, 3], [-2, -2]]], [[[1, 1], [2, 2], [-1, -1]], [[-3, -3], [-3, -3]]],
         [[[-1, -1], [2, 2], [3, 3]], [[1, 1], [-2, -2]]], [[[-1, -1], [2, 2], [3, 3]], [[1, 1], [4, 4]]],
         [[[2, 2], [3, 3], [4, 4]], [[1, 1], [5, 5]]], [[[2, 2], [3, 3], [4, 4]], [[1, 1], [-1, -1]]],
         [[[-1, -1], [-2, -2], [2, 2]], [[1, 1], [-3, -3]]], [[[-1, -1], [-2, -2], [2, 2]], [[1, 1], [3, 3]]],
         [[[-1, -1], [1, 1], [3, 3]], [[2, 2], [-2, -2]]], [[[-1, -1], [1, 1], [3, 3]], [[2, 2], [-4, -4]]],
         [[[1, 1], [3, 3], [4, 4]], [[2, 2], [-1, -1]]], [[[1, 1], [3, 3], [4, 4]], [[2, 2], [-5, -5]]],
         [[[1, 1], [2, 2]], [[-1, -1], [-2, -2], [3, 3], [4, 4]], [[5, 5]]],
         [[[1, 1], [2, 2]], [[-1, -1], [-2, -2], [3, 3], [4, 4]], [[-3, -3]]],
         [[[1, 1], [3, 3]], [[2, 2], [4, 4], [-1, -1]], [[5, 5], [-2, -2]]],
         [[[2, 2], [3, 3]], [[1, 1], [4, 4], [-1, -1]], [[-2, -2], [5, 5]]],
         [[[1, 1], [-1, -1]], [[2, 2], [-2, -2], [3, 3], [-3, -3]], [[4, 4]]],
         [[[1, 1], [-1, -1]], [[2, 2], [-2, -2], [3, 3], [-3, -3]], [[-4, -4]]],
         [[[-1, -1], [2, 2]], [[1, 1], [-2, -2], [3, 3]], [[-3, -3], [4, 4]]]],
        [[[[0, 1], [0, 2], [0, 3]], [[0, 4], [0, -1]]], [[[0, 1], [0, 2], [0, 3]], [[0, -2], [0, -1]]],
         [[[0, 1], [0, 2], [0, 3]], [[0, 4], [0, 5]]], [[[0, 1], [0, 2], [0, -1]], [[0, 3], [0, 4]]],
         [[[0, 1], [0, 2], [0, -1]], [[0, 3], [0, -2]]], [[[0, 1], [0, 2], [0, -1]], [[0, -3], [0, -3]]],
         [[[0, -1], [0, 2], [0, 3]], [[0, 1], [0, -2]]], [[[0, -1], [0, 2], [0, 3]], [[0, 1], [0, 4]]],
         [[[0, 2], [0, 3], [0, 4]], [[0, 1], [0, 5]]], [[[0, 2], [0, 3], [0, 4]], [[0, 1], [0, -1]]],
         [[[0, -1], [0, -2], [0, 2]], [[0, 1], [0, -3]]], [[[0, -1], [0, -2], [0, 2]], [[0, 1], [0, 3]]],
         [[[0, -1], [0, 1], [0, 3]], [[0, 2], [0, -2]]], [[[0, -1], [0, 1], [0, 3]], [[0, 2], [0, -4]]],
         [[[0, 1], [0, 3], [0, 4]], [[0, 2], [0, -1]]], [[[0, 1], [0, 3], [0, 4]], [[0, 2], [0, -5]]],
         [[[0, 1], [0, 2]], [[0, -1], [0, -2], [0, 3], [0, 4]], [[0, 5]]],
         [[[0, 1], [0, 2]], [[0, -1], [0, -2], [0, 3], [0, 4]], [[0, -3]]],
         [[[0, 1], [0, 3]], [[0, 2], [0, 4], [0, -1]], [[0, 5], [0, -2]]],
         [[[0, 2], [0, 3]], [[0, 1], [0, 4], [0, -1]], [[0, -2], [0, 5]]],
         [[[0, 1], [0, -1]], [[0, 2], [0, -2], [0, 3], [0, -3]], [[0, 4]]],
         [[[0, 1], [0, -1]], [[0, 2], [0, -2], [0, 3], [0, -3]], [[0, -4]]],
         [[[0, -1], [0, 2]], [[0, 1], [0, -2], [0, 3]], [[0, -3], [0, 4]]]],
        [[[[-1, 1], [-2, 2], [-3, 3]], [[-4, 4], [1, -1]]], [[[-1, 1], [-2, 2], [-3, 3]], [[2, -2], [1, -1]]],
         [[[-1, 1], [-2, 2], [-3, 3]], [[-4, 4], [-5, 5]]], [[[-1, 1], [-2, 2], [1, -1]], [[-3, 3], [-4, 4]]],
         [[[-1, 1], [-2, 2], [1, -1]], [[-3, 3], [2, -2]]], [[[-1, 1], [-2, 2], [1, -1]], [[3, -3], [3, -3]]],
         [[[1, -1], [-2, 2], [-3, 3]], [[-1, 1], [2, -2]]], [[[1, -1], [-2, 2], [-3, 3]], [[-1, 1], [-4, 4]]],
         [[[-2, 2], [-3, 3], [-4, 4]], [[-1, 1], [-5, 5]]], [[[-2, 2], [-3, 3], [-4, 4]], [[-1, 1], [1, -1]]],
         [[[1, -1], [2, -2], [-2, 2]], [[-1, 1], [3, -3]]], [[[1, -1], [2, -2], [-2, 2]], [[-1, 1], [-3, 3]]],
         [[[1, -1], [-1, 1], [-3, 3]], [[-2, 2], [2, -2]]], [[[1, -1], [-1, 1], [-3, 3]], [[-2, 2], [4, -4]]],
         [[[-1, 1], [-3, 3], [-4, 4]], [[-2, 2], [1, -1]]], [[[-1, 1], [-3, 3], [-4, 4]], [[-2, 2], [5, -5]]],
         [[[-1, 1], [-2, 2]], [[1, -1], [2, -2], [-3, 3], [-4, 4]], [[-5, 5]]],
         [[[-1, 1], [-2, 2]], [[1, -1], [2, -2], [-3, 3], [-4, 4]], [[3, -3]]],
         [[[-1, 1], [-3, 3]], [[-2, 2], [-4, 4], [1, -1]], [[-5, 5], [2, -2]]],
         [[[-2, 2], [-3, 3]], [[-1, 1], [-4, 4], [1, -1]], [[2, -2], [-5, 5]]],
         [[[-1, 1], [1, -1]], [[-2, 2], [2, -2], [-3, 3], [3, -3]], [[-4, 4]]],
         [[[-1, 1], [1, -1]], [[-2, 2], [2, -2], [-3, 3], [3, -3]], [[4, -4]]],
         [[[1, -1], [-2, 2]], [[-1, 1], [2, -2], [-3, 3]], [[3, -3], [-4, 4]]]]]
    NuocBon = [[[[-1, 0], [-2, 0], [-3, 0], [-4, 0]], [[1, 0]]], [[[-1, 0], [-2, 0], [-3, 0], [-4, 0]], [[-5, 0]]],
               [[[-1, 0], [-2, 0], [-3, 0], [1, 0]], [[2, 0]]], [[[-1, 0], [-2, 0], [-3, 0], [1, 0]], [[-4, 0]]],
               [[[-1, 0], [-2, 0], [1, 0], [2, 0]], [[3, 0]]], [[[-1, 0], [-2, 0], [1, 0], [2, 0]], [[-3, 0]]],
               [[[-1, -1], [-2, -2], [-3, -3], [-4, -4]], [[1, 1]]],
               [[[-1, -1], [-2, -2], [-3, -3], [-4, -4]], [[-5, -5]]],
               [[[-1, -1], [-2, -2], [-3, -3], [1, 1]], [[2, 2]]], [[[-1, -1], [-2, -2], [-3, -3], [1, 1]], [[-4, -4]]],
               [[[-1, -1], [-2, -2], [1, 1], [2, 2]], [[3, 3]]], [[[-1, -1], [-2, -2], [1, 1], [2, 2]], [[-3, -3]]],
               [[[0, -1], [0, -2], [0, -3], [0, -4]], [[0, 1]]], [[[0, -1], [0, -2], [0, -3], [0, -4]], [[0, -5]]],
               [[[0, -1], [0, -2], [0, -3], [0, 1]], [[0, 2]]], [[[0, -1], [0, -2], [0, -3], [0, 1]], [[0, -4]]],
               [[[0, -1], [0, -2], [0, 1], [0, 2]], [[0, 3]]], [[[0, -1], [0, -2], [0, 1], [0, 2]], [[0, -3]]],
               [[[1, -1], [2, -2], [3, -3], [4, -4]], [[-1, 1]]], [[[1, -1], [2, -2], [3, -3], [4, -4]], [[5, -5]]],
               [[[1, -1], [2, -2], [3, -3], [-1, 1]], [[-2, 2]]], [[[1, -1], [2, -2], [3, -3], [-1, 1]], [[4, -4]]],
               [[[1, -1], [2, -2], [-1, 1], [-2, 2]], [[-3, 3]]], [[[1, -1], [2, -2], [-1, 1], [-2, 2]], [[3, -3]]],
               [[[1, 0], [2, 0], [3, 0], [4, 0]], [[-1, 0]]], [[[1, 0], [2, 0], [3, 0], [4, 0]], [[5, 0]]],
               [[[1, 0], [2, 0], [3, 0], [-1, 0]], [[-2, 0]]], [[[1, 0], [2, 0], [3, 0], [-1, 0]], [[4, 0]]],
               [[[1, 0], [2, 0], [-1, 0], [-2, 0]], [[-3, 0]]], [[[1, 0], [2, 0], [-1, 0], [-2, 0]], [[3, 0]]],
               [[[1, 1], [2, 2], [3, 3], [4, 4]], [[-1, -1]]], [[[1, 1], [2, 2], [3, 3], [4, 4]], [[5, 5]]],
               [[[1, 1], [2, 2], [3, 3], [-1, -1]], [[-2, -2]]], [[[1, 1], [2, 2], [3, 3], [-1, -1]], [[4, 4]]],
               [[[1, 1], [2, 2], [-1, -1], [-2, -2]], [[-3, -3]]], [[[1, 1], [2, 2], [-1, -1], [-2, -2]], [[3, 3]]],
               [[[0, 1], [0, 2], [0, 3], [0, 4]], [[0, -1]]], [[[0, 1], [0, 2], [0, 3], [0, 4]], [[0, 5]]],
               [[[0, 1], [0, 2], [0, 3], [0, -1]], [[0, -2]]], [[[0, 1], [0, 2], [0, 3], [0, -1]], [[0, 4]]],
               [[[0, 1], [0, 2], [0, -1], [0, -2]], [[0, -3]]], [[[0, 1], [0, 2], [0, -1], [0, -2]], [[0, 3]]],
               [[[-1, 1], [-2, 2], [-3, 3], [-4, 4]], [[1, -1]]], [[[-1, 1], [-2, 2], [-3, 3], [-4, 4]], [[-5, 5]]],
               [[[-1, 1], [-2, 2], [-3, 3], [1, -1]], [[2, -2]]], [[[-1, 1], [-2, 2], [-3, 3], [1, -1]], [[-4, 4]]],
               [[[-1, 1], [-2, 2], [1, -1], [2, -2]], [[3, -3]]], [[[-1, 1], [-2, 2], [1, -1], [2, -2]], [[-3, 3]]]]
    NuocBaKhongChan = [[[[-1, 0], [-2, 0], [-3, 0]], [[1, 0], [2, 0], [-4, 0], [-5, 0]]],
              [[[1, 0], [-1, 0], [-2, 0]], [[2, 0], [3, 0], [-3, 0], [-4, 0]]],
              [[[-1, -1], [-2, -2], [-3, -3]], [[1, 1], [2, 2], [-4, -4], [-5, -5]]],
              [[[1, 1], [-1, -1], [-2, -2]], [[2, 2], [3, 3], [-3, -3], [-4, -4]]],
              [[[0, -1], [0, -2], [0, -3]], [[0, 1], [0, 2], [0, -4], [0, -5]]],
              [[[0, 1], [0, -1], [0, -2]], [[0, 2], [0, 3], [0, -3], [0, -4]]],
              [[[1, -1], [2, -2], [3, -3]], [[-1, 1], [-2, 2], [4, -4], [5, -5]]],
              [[[-1, 1], [1, -1], [2, -2]], [[-2, 2], [-3, 3], [3, -3], [4, -4]]],
              [[[1, 0], [2, 0], [3, 0]], [[-1, 0], [-2, 0], [4, 0], [5, 0]]],
              [[[-1, 0], [1, 0], [2, 0]], [[-2, 0], [-3, 0], [3, 0], [4, 0]]],
              [[[1, 1], [2, 2], [3, 3]], [[-1, -1], [-2, -2], [4, 4], [5, 5]]],
              [[[-1, -1], [1, 1], [2, 2]], [[-2, -2], [-3, -3], [3, 3], [4, 4]]],
              [[[0, 1], [0, 2], [0, 3]], [[0, -1], [0, -2], [0, 4], [0, 5]]],
              [[[0, -1], [0, 1], [0, 2]], [[0, -2], [0, -3], [0, 3], [0, 4]]],
              [[[-1, 1], [-2, 2], [-3, 3]], [[1, -1], [2, -2], [-4, 4], [-5, 5]]],
              [[[1, -1], [-1, 1], [-2, 2]], [[2, -2], [3, -3], [-3, 3], [-4, 4]]]]
    for i in range(len(NuocHaiBa)):
        for j in range(len(NuocHaiBa[i])):
            for k in range(len(NuocHaiBa[i][j])):
                for t in range(len(NuocHaiBa[i][j][k])):
                    NuocHaiBa[i][j][k][t][0] += x
                    NuocHaiBa[i][j][k][t][1] += y
    for i in range(len(NuocBon)):
        for j in range(len(NuocBon[i])):
            for k in range(len(NuocBon[i][j])):
                NuocBon[i][j][k][0] += x
                NuocBon[i][j][k][1] += y
    for i in range(len(NuocBaKhongChan)):
        for j in range(len(NuocBaKhongChan[i])):
            for k in range(len(NuocBaKhongChan[i][j])):
                NuocBaKhongChan[i][j][k][0] += x
                NuocBaKhongChan[i][j][k][1] += y
    for i in NuocBon:
        if thoaManNewVersion(i[0], i[1], [], type, board):
            return 1
    for i in NuocBaKhongChan:
        if thoaManNewVersion(i[0], i[1], [], type, board):
            return 3
    cacNuocDoi = []
    flag = False
    for Nuoc in NuocHaiBa:
        for i in Nuoc:
            if len(i) == 2:
                if thoaManNewVersion(i[0], i[1], [], type, board):
                    cacNuocDoi = themTapVao(i[0], cacNuocDoi)
                    flag = True
                    break
            else:
                if thoaManNewVersion(i[0], i[1], i[2], type, board):
                    cacNuocDoi = themTapVao(i[0], cacNuocDoi)
                    break
        if flag and len(cacNuocDoi) >= 5:
            return 2
    if len(cacNuocDoi) == 4:
        return 4
    elif len(cacNuocDoi) >= 5:
        return 3
    return 0








